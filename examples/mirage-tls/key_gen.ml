(* Generated by mirage configure -t macos (2019-03-16 19:41:47-00:00). *)

let dhcp () = false

let ips =Functoria_runtime.Key.create
  (Functoria_runtime.Arg.opt (Cmdliner.Arg.list Mirage_runtime.Arg.ipv4_address) 
   [(Ipaddr.V4.of_string_exn "0.0.0.0")] (Cmdliner.Arg.info
   ~docs:"UNIKERNEL PARAMETERS" ?docv:(Some "IPS")
   ?doc:(Some "The IPv4 addresses bound by the socket in the unikernel.  ")
   ?env:(None) ["ips"]))
let ips_t = Functoria_runtime.Key.term ips
let ips () = Functoria_runtime.Key.get ips

let ixy () = false

let logs =Functoria_runtime.Key.create
  (Functoria_runtime.Arg.opt (Cmdliner.Arg.list Mirage_runtime.Arg.log_threshold) [] (Cmdliner.Arg.info
   ~docs:"UNIKERNEL PARAMETERS" ?docv:(Some "LEVEL")
   ?doc:(Some
           "Be more or less verbose. $(docv) must be of the form\n$(b,*:info,foo:debug) means that that the log threshold is set to\n$(b,info) for every log sources but the $(b,foo) which is set to\n$(b,debug).  ")
   ?env:(Some (Cmdliner.Arg.env_var "MIRAGE_LOGS")) ["l"; "logs"]))
let logs_t = Functoria_runtime.Key.term logs
let logs () = Functoria_runtime.Key.get logs

let net () = (None)

let no_depext () = false

let prng () = `Stdlib

let secrets_kv_ro () = `Crunch

let socket =Functoria_runtime.Key.create
  (Functoria_runtime.Arg.opt (Cmdliner.Arg.some Mirage_runtime.Arg.ipv4_address) 
   (None) (Cmdliner.Arg.info ~docs:"UNIKERNEL PARAMETERS"
   ?docv:(Some "SOCKET")
   ?doc:(Some "The IPv4 address bound by the socket in the unikernel.  ")
   ?env:(None) ["socket"]))
let socket_t = Functoria_runtime.Key.term socket
let socket () = Functoria_runtime.Key.get socket

let target () = `MacOSX

let target_debug () = false

let warn_error () = false

let runtime_keys = List.combine [ips_t; logs_t; socket_t] ["ips"; "logs";
                                                           "socket"]

